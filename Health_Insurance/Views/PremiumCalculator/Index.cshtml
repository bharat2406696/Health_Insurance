@* Views/PremiumCalculator/Index.cshtml *@
@{
    ViewData["Title"] = "Premium Calculator";
}

<h1 class="mb-4">Premium Calculator</h1>

<p class="lead">Select an employee and a policy to calculate the estimated premium.</p>

<div class="row">
    <div class="col-md-6">
        <form id="premiumCalculatorForm">
            @* Employee Selection (Conditional based on role) *@
            <div class="form-group mb-3">
                <label for="employeeId" class="form-label">Employee:</label>
                @if (ViewBag.IsEmployee != null && ViewBag.IsEmployee)
                {
                    @* For Employee role: Display their name and use a hidden input for ID *@
                    <input type="text" class="form-control" value="@ViewBag.LoggedInEmployeeName" readonly />
                    <input type="hidden" id="employeeId" name="employeeId" value="@ViewBag.LoggedInEmployeeId" />
                }
                else
                {
                    @* For Admin/HR: Show a dropdown to select an employee *@
                    <select id="employeeId" name="employeeId" class="form-control" asp-items="ViewBag.EmployeeList" required>
                        <option value="">-- Select Employee --</option>
                    </select>
                }
            </div>

            @* Policy Selection (Always a dropdown) *@
            <div class="form-group mb-3">
                <label for="policyId" class="form-label">Policy:</label>
                <select id="policyId" name="policyId" class="form-control" asp-items="ViewBag.PolicyList" required>
                    <option value="">-- Select Policy --</option>
                </select>
            </div>

            <div class="form-group mt-3">
                <button type="button" id="calculatePremiumBtn" class="btn btn-primary">Calculate Premium</button>
            </div>
        </form>

        @* Display area for the calculated premium *@
        <div class="mt-4 p-3 border rounded" id="premiumResultContainer" style="display:none;">
            <h4>Calculated Premium:</h4>
            <p class="lead text-success" id="calculatedPremiumAmount"></p>
        </div>

        @* Error message display *@
        <div class="mt-3 alert alert-danger" role="alert" id="errorMessage" style="display:none;">
            <!-- Error messages will be displayed here -->
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function () {
            // Function to reset error and result displays
            function resetDisplays() {
                $('#errorMessage').hide().text('');
                $('#premiumResultContainer').hide();
                $('#calculatedPremiumAmount').text('');
            }

            $('#calculatePremiumBtn').on('click', function () {
                resetDisplays(); // Clear previous messages

                var employeeId = $('#employeeId').val();
                var policyId = $('#policyId').val();

                // Basic client-side validation for dropdowns
                if (!employeeId) {
                    $('#errorMessage').text('Please select an employee.').show();
                    // Optionally, highlight the invalid dropdown
                    // $('#employeeId').addClass('is-invalid');
                    return;
                }
                if (!policyId) {
                    $('#errorMessage').text('Please select a policy.').show();
                    // $('#policyId').addClass('is-invalid');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("CalculatePremium", "PremiumCalculator")', // Point to the POST action
                    type: 'POST',
                    data: { employeeId: employeeId, policyId: policyId },
                    success: function (response) {
                        if (response.premium !== undefined) {
                            $('#calculatedPremiumAmount').text('$' + parseFloat(response.premium).toFixed(2));
                            $('#premiumResultContainer').show();
                        } else {
                            $('#errorMessage').text('Invalid premium response from server.').show();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX error: ", status, error, xhr.responseText);
                        let errorMessage = 'An error occurred during calculation. Please try again.';
                        try {
                            // Attempt to parse JSON response for more specific error
                            const errorResponse = JSON.parse(xhr.responseText);
                            if (xhr.status === 403) {
                                errorMessage = "You do not have permission to perform this calculation for the selected employee.";
                            } else if (errorResponse && errorResponse.title) {
                                errorMessage = errorResponse.title; // For HTTP errors from controller, e.g., BadRequest
                            }
                        } catch (e) {
                            // If response is not JSON, use generic message
                        }
                        $('#errorMessage').text(errorMessage).show();
                    }
                });
            });

            // Handle changes in dropdowns to clear previous results/errors
            $('#employeeId, #policyId').on('change', function() {
                resetDisplays();
            });
        });
    </script>
}